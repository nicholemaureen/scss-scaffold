////
// Oomph Scaffold Mixins
// @access public
// @group Oomph Mixins
// @author Oomph, Inc. UX Engineers
// @content the @content directive is not used
// @parameter none
// @require no 3rd party requirements
////


// Default constants used by these mixins
// Change below only if you require a different value
// These are set by Bourbon
// $em-base: 16px;
// These are used by our mixins. Uppercase denotes they are global in scope
$ICON_FONT_FAMILY: 'font-awesome';
$DEFAULT_MIN_VW: bp(small);
$DEFAULT_MAX_VW: bp(x-large);


/// palette() =
/// Helper that does a deep get on a map called $palette
/// @author jcionci
/// @link http://erskinedesign.com/blog/friendlier-colour-names-sass-maps/
/// @example color: palette(mono, white);
/// @output color: #fff;
///
@function palette($palette, $tone:base) {

	@if not index(map-keys($palettes), $palette) {
		@error "Palette `#{$palette}` does not exist.";
	}
	@if not index(map-keys(map-get($palettes, $palette)), $tone) {
		@error "There is no `#{$tone}` defined in your `#{$palette}` color map however, its being called in your theme.";
	}
	@return map-deep-get( $palettes, $palette, $tone );
}


/// touch-hover() =
/// Provide an accesible hover for non-touch devices, turns it into the active state for mobile, and maintains a no-js fallback
/// @author jhogue
/// @require Modernizr.js to get .no-touchevents classes
/// @content the @content directive is used
// 
/// @example
///   //  .link {
///   //   padding: .5em 1em; // Styles that do not change when interacting with this element
///   //  
///   //   @include touch-hover('idle') {
///   //     color: black; // Styles for the :link and :visited states
///   //   }
///   //   @include touch-hover('hover') {
///   //     color: red; // Styles for the :focus, :hover and :active states
///   //   }
///   //  
///   //   &__disabled {
///   //     @include touch-hover('hover', true) {
///   //      color: silver; // All psuedo states are included
///   //     }
///   //   }
///   //  }
///
/// @output
///   //  .link {
///   //    padding: .5em 1em;
///   //  }
///   //  .link,
///   //  .link:link,
///   //  .link:visited {
///   //    color: black;
///   //  }
///   //  .no-js .link:hover,
///   //  .no-js .link:focus,
///   //  .js.no-touchevents .link:hover,
///   //  .js.no-touchevents .link:focus,
///   //  .js.touchevents .link:active {
///   //    color: red;
///   //  }
///   //  .no-js .link__disabled,
///   //  .no-js .link__disabled:link,
///   //  .no-js .link__disabled:visited,
///   //  .no-js .link__disabled:hover,
///   //  .no-js .link__disabled:focus,
///   //  .js.no-touchevents .link__disabled,
///   //  .js.no-touchevents .link__disabled:link,
///   //  .js.no-touchevents .link__disabled:visited,
///   //  .js.no-touchevents .link__disabled:hover,
///   //  .js.no-touchevents .link__disabled:focus,
///   //  .js.touchevents .link__disabled,
///   //  .js.touchevents .link__disabled:active {
///   //    cursor: default;
///   //    color: silver;
///   //  }
///
// @parameter 
// 1. 'idle' or 'hover'
// 2. true/false
// 
// @options
// 1. Set the name of the class hooks that moderniizr provides
// 2. Turn off modernizr as a dependency
//
@mixin touch-hover( $state: 'idle', $disabled: false ) {
	$modernizr-hook-off: 'no-touchevents';
	$modernizr-hook-on: 'touchevents';
	$modernizr: true !default; // set this to false to maintain mixin but use the no-modernizr fallbacks

  @if $state != 'idle' or $state != 'hover' {
		@warn "First parameter expects 'idle' or 'hover' as valid values";
	}
	@if $disabled != true or $disabled != false {
		@warn "Second parameter must be true or false";
	}

	@if $state == 'idle' {
		&,
		&:link,
		&:visited {
			@content;
		}
	}

	@if $state == 'hover' {
		@if $disabled == true {
			// If this link is meant to look disabled, style all states the same
			@if $modernizr == true {
				.no-js &,
				.no-js &:link,
				.no-js &:visited,
				.no-js &:hover,
				.no-js &:focus,
				.js.#{$modernizr-hook-off} &,
				.js.#{$modernizr-hook-off} &:link,
				.js.#{$modernizr-hook-off} &:visited,
				.js.#{$modernizr-hook-off} &:hover,
				.js.#{$modernizr-hook-off} &:focus,
				.js.#{$modernizr-hook-on} &,
				.js.#{$modernizr-hook-on} &:active {
					cursor: default;
					@content;
				}
			} @else {
				&,
				&:link,
				&:visited,
				&:hover,
				&:focus,
				&:active {
					cursor: default;
					@content;
				}
			}
		} @else {
			@if $modernizr == true {
				.no-js &:hover,
				.no-js &:focus,
				.js.#{$modernizr-hook-off} &:hover,
				.js.#{$modernizr-hook-off} &:focus,
				.js.#{$modernizr-hook-on} &:active {
					@content;
				}
			} @else {
				&:hover,
				&:focus,
				&:active {
					@content;
				}
			}
		}
	}
}


/// list-reset() =
/// Remove the margin, padding, and bullets from lists
/// @author jcionci
/// @example ul{ @include list-reset(); }
/// @output ul{ list-style-type: none; margin: 0; padding: 0; }
///
@mixin list-reset() {
	list-style-type: none;
	margin: 0;
	padding: 0;
}


/// show/hide() =
/// Provide a more complete show/hide option over using display: none
/// @author jhogue
/// @example @include show()
/// @output display: block; visibility: visible;
/// @parameter valid display definitions
///
@mixin show( $display: block ) {
	display: $display;
	visibility: visible;
}

/// @author jhogue
/// @example @include hide()
/// @output display: none; visibility: hidden;
@mixin hide() {
	display: none;
	visibility: hidden;
}


/// Set a container to crop an element and maintain an aspect ratio
/// Use proportional-container() and image-cover() together:
/// @example
///   // .container {
///   //   @include proportional-container(16 9);
///   //   
///   //   .element {
///   //     @include image-cover();
///   //   }
///   // }
///
/// @outputs
///   // .container {
///   //   position: relative;
///   //   overflow: hidden;
///   //   z-index: 1;
///   //   width: 100%;
///   //   height: 0;
///   //   padding-bottom: 56.25%;
///   // }
///   // .container .element {
///   // 	transform: translateX(-50%);
///   // 	top: 0;
///   // 	left: 50%;
///   // 	width: auto;
///   // 	max-width: none;
///   // 	height: 100%;
///   // }
/// @link https://gist.github.com/brianmcallister/2932463


/// maintain-ratio() =
/// Helper mixin that calculates a percentage padding value to "fix" the proportions of a container to an aspect ratio
/// @require SASS length(), SASS percentage(), SASS nth()
/// @example
///  //  @include maintain-ratio(16 9)
/// @output
///  //  width: 100%; height: 0; padding-bottom: 56.25%;
/// @parameter space separated ratio definition
///
@mixin maintain-ratio($ratio: 1 1) {
	@if length($ratio) < 2 or length($ratio) > 2 {
		@warn "$ratio must be a list with two values.";
	}
	width: 100%;
	height: 0;
	padding-bottom: percentage(nth($ratio, 2) / nth($ratio, 1));
}

/// proportional-container() =
/// Sets a container to "crop" an element to a fixed aspect ratio
/// @require Oomph maintain-ratio()
/// @example 
///  //  @include proportional-container(16 9)
/// @output
///  //  position: relative; overflow: hidden; z-index: 1; height: 0; padding-bottom: 56.25%; width: 100%
/// @parameter space separated ratio definition
///
@mixin proportional-container( $ratio: 1 1 ) {
	position: relative;
	overflow: hidden;
	z-index: 1;
	@include maintain-ratio( $ratio );
}

/// image-cover() =
/// Sets a container to "crop" an element to a fixed aspect ratio
/// @require Bourbon transform()
/// @example
///  //  @include image-cover(auto 100%)
/// @output various depending on parameter
/// @parameter '100% auto' (width height), 'auto 100%' (width height) or 'contain'
///
@mixin image-cover( $center: '100% auto' ) {
	$allowed: ('100% auto','auto 100%','contain');

	@if not index($allowed, $center) {
		@warn "Keyword `#{$center}` for mixin 'image-cover' is not allowed. #{$allowed} is expected.";
	}

	position: absolute;
	z-index: 2;

	@if ($center == 'contain') {
		// Keep the entire element inside the container
		@include transform( translate(-50%,-50%) );
		top: 50%;
		left: 50%;
		width: auto;
		height: auto;
		max-height: 100%;
	} @else if ($center == '100% auto') {
		// Fill the width, let the height be what it needs to be
		@include transform( translateY(-50%) );
		top: 50%;
		left: 0;
		width: 100%;
		height: auto;
	} @else {
		// Default: Fill the height, let the width be what it needs to be
		@include transform( translateX(-50%) );
		top: 0;
		left: 50%;
		width: auto;
		max-width: none;
		height: 100%;
	}
}

/// rem() =
/// Provide REM and PX fallback for any property
/// @author jhogue
/// @require Oomph Scaffold px() and Bourbon rem() functions
/// @example 
///  //  @include rem('padding-top', 32)
/// @output
///  //  padding-top: 32px; padding-top: 2rem;
/// @parameter 
///   1. valid css property declaration
///   2. numeric value assumed to be pixels
///
@mixin rem($property, $value) {
	$number: strip-units($value * 1);
	$declaration: unquote($property);

	// scss-lint:disable DuplicateProperty
	#{$declaration}: px($number);
	#{$declaration}: rem($number);
}

/// Alias of the above for font-size only
@mixin rem-fontsize($value) {
	@include rem('font-size', $value);
}


/// fluid-units() =
/// Set a minimum value, maximum value, and use calc() to fluidly go from one to the other in between
/// @author Indrek Paas @indrekpaas
/// @link Inspired by http://madebymike.com.au/writing/precise-control-responsive-typography/
/// @require `strip-units()` function by Hugo Giraudel
/// @example 
///  //  @include fluid-unit('padding-top padding-bottom', 1em, 4em, em(480), em(1200));
/// @output
///  //  
/// @parameter quoted string, four numeric values of the same measurement unit, i.e. all PX or all EM
///
@mixin fluid-units($properties, $min-value, $max-value, $min-vw: $DEFAULT_MIN_VW, $max-vw: $DEFAULT_MAX_VW) {
  // Mobile-first: declare the $min-value as the default for any property passed
  @each $property in $properties {
    #{$property}: $min-value;
  }

  // Now declare the creamy, fluid center using a media query at the min-width
  @media (min-width: $min-vw) {
    @each $property in $properties {
      #{$property}: calc(#{$min-value} + #{strip-units($max-value - $min-value)} * (100vw - #{$min-vw}) / #{strip-units($max-vw - $min-vw)});
    }
  }

  // Finally, stop the crazy fluidity and set the max value at the max viewport width
  @media (min-width: $max-vw) {
    @each $property in $properties {
      #{$property}: $max-value;
    }
  }
}


/// javascript-listener() =
/// Provide a method for passing parameters to JS
/// @author jhogue
/// @link https://adactio.com/journal/5429
/// @example 
///  //  @include javascript-listener('action-hook')
/// @output
///  //  body:after { content: 'action-hook', display: none; speak: none; }
/// @parameter quoted string
///
@mixin javascript-listener($content) {
	body:after {
		content: $content;
		display: none;
		speak: none;
	}
}


/// icon() =
/// Set a font-family and use this mixin to simplify declaring properties to :before or :after elements
/// @author jcionci
/// @example 
///  //  .element { @include icon('\f105', after); }
/// @output see below
/// @parameter
///   1. a particular icon content code in quotes
///   2. 'before' (default) or 'after'
///   3. (optional) color value
///
@mixin icon($icon, $position: 'before', $color:inherit) {
	&::#{unquote($position)} {
		content: $icon;
		color: $color;
		display: inline-block;
		font-family: $ICON_FONT_FAMILY;
		font-style: normal;
		font-weight: normal;
		text-decoration: inherit;
		-webkit-font-smoothing: antialiased;
		moz-osx-font-smoothing: grayscale;

		@if $position == 'before' {
			margin-right: .5em;
		}

		@if $position == 'after' {
			margin-left: .5em;
		}
	}
}
