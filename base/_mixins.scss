// @file mixins.scss

// @link http://csswizardry.com/2016/02/mixins-better-for-performance/

// Provide a hover effect for non-touch devices, turn it into an Active state for mobile, and maintain a fallback.
// @requires Modernizr as a JS dependency to get .no-touch classes
// Adds styles via @content
// @jhogue
//
@mixin touch-hover( $state: 'idle', $disabled: false ) {
	// Change these as needed, based on your version of Modernizr
	$modernizr-hook-off: 'no-touchevents';
	$modernizr-hook-on: 'touchevents';

	@if $state == 'idle' {
		&,
		&:link,
		&:visited {
	    @content;
		}
	} 

	@if $state == 'hover' {
		@if $disabled {
			.no-js &,
			.no-js &:hover, // the fallback
			.no-js &:focus,
			.js.#{$modernizr-hook-off} &,
			.js.#{$modernizr-hook-off} &:hover, // enhanced for no-touch
			.js.#{$modernizr-hook-off} &:focus,
			.js.#{$modernizr-hook-on} &,
			.js.#{$modernizr-hook-on} &:active { // relay same styles to active for touch devices
				@content;
			}
		} @else {
			.no-js &:hover, // the fallback
			.no-js &:focus,
			.js.#{$modernizr-hook-off} &:hover, // enhanced for no-touch
			.js.#{$modernizr-hook-off} &:focus,
			.js.#{$modernizr-hook-on} &:active { // relay same styles to active for touch devices
				@content;
			}
		}
	}
}

// Column Grid
// Simple mixin to display the grid - options are either 2, 3, or 4
// @param number of columns
// @usage column-grid(2)
// @johncionci
@mixin column-grid( $columns: null ) {
	@if $columns == 3 {
		@include span-columns(4);
	} @else if $columns == 4 {
		@include span-columns(3);
	} @else {
		@include span-columns(6);
	}
}

// List Reset
// Remove the margin, padding, and bullets from lists
// @johncionci
//
@mixin list-reset() {
	list-style-type: none;
	margin: 0;
	padding: 0;
}

// Accessible show/hide
// @jhogue
@mixin hide() {
	display: none;
	visibility: hidden;
}

@mixin show( $display: block ) {
	display: $display;
	visibility: visible;
}

// Maintain ratio mixin. Great for responsive grids, or videos.
// "Crops" the element to the size of the container with overflow: hidden
// https://gist.github.com/brianmcallister/2932463
// $ratio - Ratio the element needs to maintain.
// Example: A 16:9 ratio would look like this: .element { @include maintain-ratio(16 9); }
// @jhogue
@mixin maintain-ratio($ratio: 1 1) {
  @if length($ratio) < 2 or length($ratio) > 2 {
    @warn "$ratio must be a list with two values.";
  }
  height: 0;
  padding-bottom: percentage(nth($ratio, 2) / nth($ratio, 1));
  width: 100%;
}

// Apply as a typical container mixin
@mixin proportional-container( $ratio: 1 1 ) {
  overflow: hidden;
  position: relative;
  z-index: 1;
  @include maintain-ratio( $ratio );
}

// Use like you would background-cover, except on imgs inside a wrapper
// Accepts '100% auto' (width height), 'auto 100%' (width height) or 'contain' as values
@mixin image-cover( $center: '100% auto' ) {
  $allowed: ('100% auto','auto 100%','contain');
  @if not index($allowed, $center) {
		@error "Keyword `#{$center}` for mixin 'image-cover' is not allowed. #{$allowed} is expected.";
  }
  position: absolute;
  z-index: 2;
  @if ($center == 'contain') {
    @include transform( translate(-50%,-50%) );
    top: 50%; left: 50%;
    height: auto;
    max-height: 100%; // we already have a rule for max-width: 100%
    width: auto;
  } @else if ($center == '100% auto') {
    // Fill the width, let the height be what it needs to be
    @include transform( translateY(-50%) );
    top: 50%; left: 0;
    height: auto;
    width: 100%;
  } @else {
    // Default: Fill the height, let the width be what it needs to be
    @include transform( translateX(-50%) );
    top: 0; left: 50%;
    height: 100%;
    max-width: 200%; // reset the max-width: 100% present on all img elements
    width: auto;
  }
}

// Provide REM and PX fallback for any property
// Gulp used to do this for us, but Brunch does not
// @accepts: css property, numeric value
// @requires: value must be a pixel value, stripped of its unit
// @dependson: px(), a function of ours, and rem(), a function of Bourbon
// @returns: two property values, one with px, one with rem units
// @jhogue
@mixin rem($property, $value) {
	$number: strip-units($value * 1);
	$declaration: unquote($property);
	// scss-lint:disable DuplicateProperty
	#{$declaration}: px($number);
	#{$declaration}: rem($number);
}
// Alias of the above
@mixin rem-fontsize($value) {
	@include rem('font-size', $value);
}


// Output a little 'tag' on the body:after content
// @accepts: string
// @requires: $content string should be in single quotes
// @returns: entire body pseudo-class declaration
// @usage: @include javascript_tag( 'actionhook' );
// @jhogue
@mixin javascript-listener( $content ) {
	body:after {
		content: $content; 
		display: none; 
		speak: none; 
	}
}