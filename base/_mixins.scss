////
// Oomph Scaffold Mixins
// @access public
// @group Oomph Mixins
// @author Oomph, Inc. UX Engineers
// @content the @content directive is not used
// @parameter none
// @require no 3rd party requirements
////


/// touch-hover() =
/// Provide an accesible hover for non-touch devices, turns it into the active state for mobile, and maintains a no-js fallback
/// @author jhogue
///
/// @require Modernizr.js to get touchevent classes
///
/// @content the @content directive is used
///
/// @param {String} $state 
///    Which state is this element in? Accepts 'idle' or 'hover'
///
/// @param {Boolean} $disabled
///
/// @example scss - Usage
///   //  .link {
///   //   padding: .5em 1em; // Styles that do not change when interacting with this element
///   //  
///   //   @include touch-hover('idle') {
///   //     color: black; // Styles for the :link and :visited states
///   //   }
///   //   @include touch-hover('hover') {
///   //     color: red; // Styles for the :focus, :hover and :active states
///   //   }
///   //  
///   //   &__disabled {
///   //     @include touch-hover('hover', true) {
///   //      color: silver; // All psuedo states are included
///   //     }
///   //   }
///   //  }
///
/// @example css - Output
///   //  .link {
///   //    padding: .5em 1em;
///   //  }
///   //  .link,
///   //  .link:link,
///   //  .link:visited {
///   //    color: black;
///   //  }
///   //  .no-js .link:hover,
///   //  .no-js .link:focus,
///   //  .js.no-touchevents .link:hover,
///   //  .js.no-touchevents .link:focus,
///   //  .js.touchevents .link:active {
///   //    color: red;
///   //  }
///   //  .no-js .link__disabled,
///   //  .no-js .link__disabled:link,
///   //  .no-js .link__disabled:visited,
///   //  .no-js .link__disabled:hover,
///   //  .no-js .link__disabled:focus,
///   //  .js.no-touchevents .link__disabled,
///   //  .js.no-touchevents .link__disabled:link,
///   //  .js.no-touchevents .link__disabled:visited,
///   //  .js.no-touchevents .link__disabled:hover,
///   //  .js.no-touchevents .link__disabled:focus,
///   //  .js.touchevents .link__disabled,
///   //  .js.touchevents .link__disabled:active {
///   //    cursor: default;
///   //    color: silver;
///   //  }
///
/// @options
/// 1. Set the name of the class hooks that moderniizr provides
/// 2. Turn off modernizr as a dependency
///
@mixin touch-hover($state: 'idle', $disabled: false) {
  $modernizr-hook-off: 'no-touchevents';
  $modernizr-hook-on: 'touchevents';
  $modernizr: true !default; // set this to false to maintain mixin but use the no-modernizr fallbacks

  @if ($state != 'idle') and ($state != 'hover') {
    @error "First parameter expects 'idle' or 'hover' as valid values";
  }
  @if ($disabled != true) and ($disabled != false) {
    @error "Second parameter must be true or false";
  }

  @if $state == 'idle' {
    &,
    &:link,
    &:visited {
      @content;
    }
  }

  @if $state == 'hover' {
    @if $disabled == true {
      // If this link is meant to look disabled, style all states the same
      @if $modernizr == true {
        .no-js &,
        .no-js &:link,
        .no-js &:visited,
        .no-js &:hover,
        .no-js &:focus,
        .js.#{$modernizr-hook-off} &,
        .js.#{$modernizr-hook-off} &:link,
        .js.#{$modernizr-hook-off} &:visited,
        .js.#{$modernizr-hook-off} &:hover,
        .js.#{$modernizr-hook-off} &:focus,
        .js.#{$modernizr-hook-on} &,
        .js.#{$modernizr-hook-on} &:active {
          cursor: default;
          @content;
        }
      } @else {
        &,
        &:link,
        &:visited,
        &:hover,
        &:focus,
        &:active {
          cursor: default;
          @content;
        }
      }
    } @else {
      @if $modernizr == true {
        .no-js &:hover,
        .no-js &:focus,
        .js.#{$modernizr-hook-off} &:hover,
        .js.#{$modernizr-hook-off} &:focus,
        .js.#{$modernizr-hook-on} &:active {
          @content;
        }
      } @else {
        &:hover,
        &:focus,
        &:active {
          @content;
        }
      }
    }
  }
}


/// list-reset() =
/// Remove the margin, padding, and bullets from lists
/// @author jcionci
///
/// @param {None}
///
/// @example scss - Usage
///   // ul {
///   //   @include list-reset();
///   // }
///
/// @example css - Output
///   // ul {
///   //   list-style-type: none;
///   //   margin: 0;
///   //   padding: 0;
///   // }
///
@mixin list-reset() {
  list-style-type: none;
  margin: 0;
  padding: 0;
}


/// show/hide() =
/// Provide a more complete show/hide option over using display: none
/// @author jhogue
///
/// @param {String} $display [block]
///   valid display property
///
/// @example scss - Usage
///   // @include show()
///
/// @example css - Output
///   // display: block;
///   // visibility: visible;
///
@mixin show($display: block) {
  display: $display;
  visibility: visible;
}

/// @author jhogue
///
/// @param {None}
/// 
/// @example scss - UsAGE
///   // @include hide()
///
/// @example css - Output
///   // display: none;
///   // visibility: hidden;
///
@mixin hide() {
  display: none;
  visibility: hidden;
}


/// maintain-ratio(), proportional-container() and image-cover() = 
///
/// Set a container to crop an element and maintain an aspect ratio
/// Use proportional-container() and image-cover() together:
///
/// @link https://gist.github.com/brianmcallister/2932463
///
/// @example scss - Usage
///   // .container {
///   //   @include proportional-container(16 9);
///   //   
///   //   .element {
///   //     @include image-cover();
///   //   }
///   // }
///
/// @example css - Output
///   // .container {
///   //   position: relative;
///   //   overflow: hidden;
///   //   z-index: 1;
///   //   width: 100%;
///   //   height: 0;
///   //   padding-bottom: 56.25%;
///   // }
///   // .container .element {
///   //  transform: translateX(-50%);
///   //  top: 0;
///   //  left: 50%;
///   //  width: auto;
///   //  max-width: none;
///   //  height: 100%;
///   // }
///


/// maintain-ratio() =
/// Helper mixin that calculates a percentage padding value to "fix" the proportions of a container to an aspect ratio
/// @author jhogue
///
/// @param {list} Ratio [1 1]
///
/// @require {function} length
/// @require {function} percentage
/// @require {function} nth
///
/// @example scss - Usage
///   // @include maintain-ratio(16 9)
///
/// @example css - Output
///   // width: 100%;
///   // height: 0;
///   // padding-bottom: 56.25%;
///
@mixin maintain-ratio($ratio: 1 1) {
  @if length($ratio) < 2 or length($ratio) > 2 {
    @warn "$ratio must be a list with two values.";
  }
  width: 100%;
  height: 0;
  padding-bottom: percentage(nth($ratio, 2) / nth($ratio, 1));
}

/// proportional-container() =
/// Sets a container to "crop" an element to a fixed aspect ratio
/// @author jhogue
///
/// @param {list} Ratio [1 1]
///
/// @require {mixin} maintain-ratio
///
/// @example scss - Usage
///  // @include proportional-container(16 9)
///
/// @example css - Output
///  // position: relative;
///  // overflow: hidden;
///  // z-index: 1;
///  // height: 0;
///  // padding-bottom: 56.25%;
///  // width: 100%
///
@mixin proportional-container($ratio: 1 1) {
  @include maintain-ratio( $ratio );
  position: relative;
  overflow: hidden;
  z-index: 1;
}

/// image-cover() =
/// Sets a container to "crop" an element to a fixed aspect ratio
/// @author jhogue
///
/// @param {String} $center ['100% auto']
///   Accepts '100% auto' (width height), 'auto 100%' (width height), or 'contain'
///
/// @require {library} Bourbon
/// @require {mixin} transform
///
/// @example scss - Usage
///  // @include image-cover(auto 100%)
///
@mixin image-cover($center: '100% auto') {
  $allowed: ('100% auto','auto 100%','contain');

  @if not index($allowed, $center) {
    @error "Keyword `#{$center}` for mixin 'image-cover' is not allowed. `#{$allowed}` is expected.";
  }
  position: absolute;
  z-index: 2;

  @if ($center == 'contain') {
    // Keep the entire element inside the container
    @include transform( translate(-50%,-50%) );
    top: 50%;
    left: 50%;
    width: auto;
    height: auto;
    max-height: 100%;
  } @else if ($center == '100% auto') {
    // Fill the width, let the height be what it needs to be
    @include transform( translateY(-50%) );
    top: 50%;
    left: 0;
    width: 100%;
    height: auto;
  } @else {
    // Default: Fill the height, let the width be what it needs to be
    @include transform( translateX(-50%) );
    top: 0;
    left: 50%;
    width: auto;
    max-width: none;
    height: 100%;
  }
}

/// rem() =
/// Provide rem and px fallback for any property
/// @author jhogue
///
/// @param {String} valid css property
///   The property to calculate px and rem for
///
/// @param {Numeric} value
///   The value, assumed ot be pixels
///
/// @require {function} unquote
/// @require {function} px
///
/// @require {library} Bourbon
/// @require {function} strip-units
/// @require {function} rem
///
/// @example scss - Usage
///  // @include rem('padding-top', 32)
///
/// @example css - Output
///  // padding-top: 32px;
///  // padding-top: 2rem;
///
@mixin rem($property, $value) {
  $number: strip-units($value * 1);
  $declaration: unquote($property);

  // scss-lint:disable DuplicateProperty
  #{$declaration}: px($number);
  #{$declaration}: rem($number);
}

/// Alias of rem() for font-size only
@mixin rem-fontsize($value) {
  @include rem('font-size', $value);
}


/// fluid-units() =
/// Set a minimum value, maximum value, and use calc() to fluidly go from one to the other in between
/// @author Indrek Paas @indrekpaas
/// @link Inspired by http://madebymike.com.au/writing/precise-control-responsive-typography/
///
/// @param {List} $properties
///   List one or multiple properties to assign values to
///
/// @param {String} $min-value
/// @param {String} $max-value
///   Min/Max values for the measurement. The same units should be used (px, em, rem)
///
/// @param {String} $min-vw
/// @param {String} $max-vw
///   Min/Max viewport width. Which viewport "locks" should the fluid measurements start and end at?
///
/// @require {library} Bourbon
/// @require {function} strip-units
///
/// @example scss - Usage
///  // @include fluid-unit('padding-top padding-bottom', 1em, 4em, em(480), em(1200));
///
@mixin fluid-units($properties, $min-value, $max-value, $min-vw, $max-vw) {
  // Mobile-first: declare the $min-value as the default for any property passed
  @each $property in $properties {
    #{$property}: $min-value;
  }

  // Now declare the creamy, fluid center using a media query at the min-width
  @media (min-width: $min-vw) {
    @each $property in $properties {
      #{$property}: calc(#{$min-value} + #{strip-units($max-value - $min-value)} * (100vw - #{$min-vw}) / #{strip-units($max-vw - $min-vw)});
    }
  }

  // Finally, stop the crazy fluidity and set the max value at the max viewport width
  @media (min-width: $max-vw) {
    @each $property in $properties {
      #{$property}: $max-value;
    }
  }
}


/// javascript-listener() =
/// Provide a method for passing parameters to JS
/// @author jhogue
/// @link https://adactio.com/journal/5429
///
/// @param {String} $content
///
/// @example scss - Usage
///  // @include javascript-listener('action-hook')
///
/// @example css - Output
///  // body:after {
///  //   content: 'action-hook',
///  //   display: none;
///  //   speak: none;
///  // }
///
@mixin javascript-listener($content) {
  body:after {
    content: $content;
    display: none;
    speak: none;
  }
}


/// icon() =
/// Set a font-family and use this mixin to simplify declaring properties to :before or :after elements
/// @author jcionci
///
/// @require {function} unquote
///
/// @param {String} $icon
///   Expects a character value to be inserted into "content: ''"
/// @param {String} $position [before]
/// @param {Color} $color [inherit]
///
/// @example scss - Usage
///  // .element { @include icon('\f105', after); }
///
@mixin icon($icon, $position: 'before', $color:inherit) {
  &::#{unquote($position)} {
    content: $icon;
    color: $color;
    display: inline-block;
    font-family: $icon-font-family;
    font-style: normal;
    font-weight: normal;
    text-decoration: inherit;
    -webkit-font-smoothing: antialiased;
    moz-osx-font-smoothing: grayscale;

    @if $position == 'before' {
      margin-right: .5em;
    }

    @if $position == 'after' {
      margin-left: .5em;
    }
  }
}


/// writing-mode() =
/// Bourbon-style helper to output vendor-prefixed rulesets
/// @author jhogue
/// @link http://labs.jensimmons.com/#writing-modes
/// @link https://developer.mozilla.org/en-US/docs/Web/CSS/writing-mode
///
/// @param {String} $mode
///   Expects valid writing-mode values
///
/// @require {library} Bourbon
/// @require {function} prefixer
///
/// @example scss - Usage
///   // @include writing-mode(vertical-rl);
///
/// @example css - Output
///   // -webkit-writing-mode: vertical-rl;
///   // writing-mode: vertical-rl;
///
@mixin writing-mode($mode) {
  // 01-24-2017 Webkit vendor prefix still needed
  // 01-24-2017 dropping MS prefix as IE11+ supports the spec
  @include prefixer(writing-mode, $mode, webkit spec);
}
